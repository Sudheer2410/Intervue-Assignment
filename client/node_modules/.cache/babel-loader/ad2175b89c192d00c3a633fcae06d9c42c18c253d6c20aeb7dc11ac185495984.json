{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\home\\\\Desktop\\\\SDE-Assignment\\\\client\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [userRole, setUserRole] = useState(null);\n  const [userName, setUserName] = useState(null);\n  const [connectionError, setConnectionError] = useState(null);\n  useEffect(() => {\n    // Connect to the backend server\n    const serverUrl = process.env.REACT_APP_SERVER_URL || 'http://localhost:5000';\n    console.log('SocketContext: Connecting to server at:', serverUrl);\n    const newSocket = io(serverUrl, {\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      forceNew: true\n    });\n    newSocket.on('connect', () => {\n      console.log('SocketContext: Connected to server successfully');\n      setIsConnected(true);\n      setConnectionError(null);\n    });\n    newSocket.on('connect_error', error => {\n      console.error('SocketContext: Connection error:', error);\n      setConnectionError(`Failed to connect to server: ${error.message}`);\n      setIsConnected(false);\n    });\n    newSocket.on('disconnect', reason => {\n      console.log('SocketContext: Disconnected from server:', reason);\n      setIsConnected(false);\n      if (reason === 'io server disconnect') {\n        // the disconnection was initiated by the server, you need to reconnect manually\n        console.log('SocketContext: Server disconnected, attempting to reconnect...');\n        newSocket.connect();\n      }\n    });\n    newSocket.on('error', error => {\n      console.error('SocketContext: Socket error:', error);\n      setConnectionError(`Socket error: ${error.message}`);\n    });\n\n    // Debug: Log all events\n    newSocket.onAny((eventName, ...args) => {\n      console.log('SocketContext: Received event:', eventName, args);\n    });\n    setSocket(newSocket);\n    return () => {\n      console.log('SocketContext: Cleaning up socket connection');\n      newSocket.close();\n    };\n  }, []);\n\n  // Auto-join as teacher when socket connects\n  useEffect(() => {\n    if (socket && socket.connected && userRole === 'teacher') {\n      console.log('SocketContext: Auto-joining as teacher');\n      socket.emit('join-teacher');\n    }\n  }, [socket, socket === null || socket === void 0 ? void 0 : socket.connected, userRole]);\n  const joinAsStudent = name => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Joining as student:', name);\n      socket.emit('join-student', {\n        name\n      });\n      setUserRole('student');\n      setUserName(name);\n    } else {\n      console.error('SocketContext: Cannot join as student - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const joinAsTeacher = () => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Joining as teacher');\n      socket.emit('join-teacher');\n      setUserRole('teacher');\n      setUserName('Teacher');\n    } else {\n      console.error('SocketContext: Cannot join as teacher - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const createPoll = pollData => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Creating poll with data:', pollData);\n      socket.emit('new-question', pollData);\n    } else {\n      console.error('SocketContext: Cannot create poll - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const submitAnswer = (questionId, selectedOption) => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Submitting answer:', {\n        questionId,\n        selectedOption\n      });\n      socket.emit('student-answer', {\n        questionId,\n        selectedOption\n      });\n    } else {\n      console.error('SocketContext: Cannot submit answer - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const kickStudent = studentId => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Kicking student:', studentId);\n      socket.emit('kick-student', studentId);\n    } else {\n      console.error('SocketContext: Cannot kick student - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const endPoll = () => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Ending poll');\n      socket.emit('end-poll');\n    } else {\n      console.error('SocketContext: Cannot end poll - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const value = {\n    socket,\n    isConnected,\n    userRole,\n    userName,\n    connectionError,\n    joinAsStudent,\n    joinAsTeacher,\n    createPoll,\n    submitAnswer,\n    kickStudent,\n    endPoll\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"ddhEmFjwnwMHRCLjcI1JfCQ+Huw=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","userRole","setUserRole","userName","setUserName","connectionError","setConnectionError","serverUrl","process","env","REACT_APP_SERVER_URL","console","log","newSocket","transports","timeout","forceNew","on","error","message","reason","connect","onAny","eventName","args","close","connected","emit","joinAsStudent","name","joinAsTeacher","createPoll","pollData","submitAnswer","questionId","selectedOption","kickStudent","studentId","endPoll","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/home/Desktop/SDE-Assignment/client/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [userRole, setUserRole] = useState(null);\r\n  const [userName, setUserName] = useState(null);\r\n  const [connectionError, setConnectionError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Connect to the backend server\r\n    const serverUrl = process.env.REACT_APP_SERVER_URL || 'http://localhost:5000';\r\n    console.log('SocketContext: Connecting to server at:', serverUrl);\r\n    \r\n    const newSocket = io(serverUrl, {\r\n      transports: ['websocket', 'polling'],\r\n      timeout: 20000,\r\n      forceNew: true\r\n    });\r\n    \r\n    newSocket.on('connect', () => {\r\n      console.log('SocketContext: Connected to server successfully');\r\n      setIsConnected(true);\r\n      setConnectionError(null);\r\n    });\r\n\r\n    newSocket.on('connect_error', (error) => {\r\n      console.error('SocketContext: Connection error:', error);\r\n      setConnectionError(`Failed to connect to server: ${error.message}`);\r\n      setIsConnected(false);\r\n    });\r\n\r\n    newSocket.on('disconnect', (reason) => {\r\n      console.log('SocketContext: Disconnected from server:', reason);\r\n      setIsConnected(false);\r\n      if (reason === 'io server disconnect') {\r\n        // the disconnection was initiated by the server, you need to reconnect manually\r\n        console.log('SocketContext: Server disconnected, attempting to reconnect...');\r\n        newSocket.connect();\r\n      }\r\n    });\r\n\r\n    newSocket.on('error', (error) => {\r\n      console.error('SocketContext: Socket error:', error);\r\n      setConnectionError(`Socket error: ${error.message}`);\r\n    });\r\n\r\n    // Debug: Log all events\r\n    newSocket.onAny((eventName, ...args) => {\r\n      console.log('SocketContext: Received event:', eventName, args);\r\n    });\r\n\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      console.log('SocketContext: Cleaning up socket connection');\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  // Auto-join as teacher when socket connects\r\n  useEffect(() => {\r\n    if (socket && socket.connected && userRole === 'teacher') {\r\n      console.log('SocketContext: Auto-joining as teacher');\r\n      socket.emit('join-teacher');\r\n    }\r\n  }, [socket, socket?.connected, userRole]);\r\n\r\n  const joinAsStudent = (name) => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Joining as student:', name);\r\n      socket.emit('join-student', { name });\r\n      setUserRole('student');\r\n      setUserName(name);\r\n    } else {\r\n      console.error('SocketContext: Cannot join as student - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const joinAsTeacher = () => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Joining as teacher');\r\n      socket.emit('join-teacher');\r\n      setUserRole('teacher');\r\n      setUserName('Teacher');\r\n    } else {\r\n      console.error('SocketContext: Cannot join as teacher - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const createPoll = (pollData) => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Creating poll with data:', pollData);\r\n      socket.emit('new-question', pollData);\r\n    } else {\r\n      console.error('SocketContext: Cannot create poll - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const submitAnswer = (questionId, selectedOption) => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Submitting answer:', { questionId, selectedOption });\r\n      socket.emit('student-answer', { questionId, selectedOption });\r\n    } else {\r\n      console.error('SocketContext: Cannot submit answer - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const kickStudent = (studentId) => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Kicking student:', studentId);\r\n      socket.emit('kick-student', studentId);\r\n    } else {\r\n      console.error('SocketContext: Cannot kick student - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const endPoll = () => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Ending poll');\r\n      socket.emit('end-poll');\r\n    } else {\r\n      console.error('SocketContext: Cannot end poll - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    userRole,\r\n    userName,\r\n    connectionError,\r\n    joinAsStudent,\r\n    joinAsTeacher,\r\n    createPoll,\r\n    submitAnswer,\r\n    kickStudent,\r\n    endPoll,\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}