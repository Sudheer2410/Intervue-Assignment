{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\home\\\\Desktop\\\\SDE-Assignment\\\\client\\\\src\\\\contexts\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nexport const useSocket = () => {\n  _s();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SocketProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [userRole, setUserRole] = useState(null);\n  const [userName, setUserName] = useState(null);\n  const [connectionError, setConnectionError] = useState(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [unreadMessages, setUnreadMessages] = useState(0);\n  const [pollResults, setPollResults] = useState(null);\n\n  // Debug log when pollResults changes\n  useEffect(() => {\n    console.log('SocketContext: pollResults state changed:', pollResults);\n  }, [pollResults]);\n  useEffect(() => {\n    // Connect to the backend server\n    const serverUrl = process.env.REACT_APP_SERVER_URL || 'http://localhost:5000';\n    const newSocket = io(serverUrl, {\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      forceNew: true\n    });\n    newSocket.on('connect', () => {\n      console.log('SocketContext: Connected to server');\n      setIsConnected(true);\n      setConnectionError(null);\n\n      // Re-join if we have user info\n      if (userRole && userName) {\n        console.log('SocketContext: Re-joining as', userRole, userName);\n        if (userRole === 'student') {\n          newSocket.emit('join-student', {\n            name: userName\n          });\n        } else if (userRole === 'teacher') {\n          newSocket.emit('join-teacher');\n        }\n      }\n    });\n    newSocket.on('connect_error', error => {\n      setConnectionError(`Failed to connect to server: ${error.message}`);\n      setIsConnected(false);\n    });\n    newSocket.on('disconnect', reason => {\n      console.log('SocketContext: Disconnected:', reason);\n      setIsConnected(false);\n      if (reason === 'io server disconnect') {\n        // the disconnection was initiated by the server, you need to reconnect manually\n        console.log('SocketContext: Server disconnected, attempting to reconnect...');\n        setTimeout(() => {\n          newSocket.connect();\n        }, 1000);\n      } else if (reason === 'io client disconnect') {\n        // the disconnection was initiated by the client\n        console.log('SocketContext: Client disconnected');\n      } else {\n        // the disconnection was initiated by the network\n        console.log('SocketContext: Network disconnected, attempting to reconnect...');\n        setTimeout(() => {\n          newSocket.connect();\n        }, 2000);\n      }\n    });\n    newSocket.on('error', error => {\n      setConnectionError(`Socket error: ${error.message}`);\n    });\n\n    // Global chat event listeners\n    newSocket.on('chat-history', history => {\n      setChatMessages(history);\n    });\n    newSocket.on('new-message', message => {\n      setChatMessages(prev => {\n        const newMessages = [...prev, message];\n        return newMessages;\n      });\n      setUnreadMessages(prev => prev + 1);\n    });\n\n    // Global poll results listener\n    newSocket.on('poll-results', data => {\n      console.log('SocketContext: Received poll results:', data);\n      console.log('SocketContext: Setting pollResults state');\n      setPollResults(data);\n      console.log('SocketContext: pollResults state updated');\n    });\n\n    // Clear poll results when new question is created\n    newSocket.on('new-question', question => {\n      setPollResults(null);\n    });\n\n    // Listen for successful join\n    newSocket.on('joined', data => {\n      setUserRole(data.role);\n      setUserName(data.name);\n    });\n    setSocket(newSocket);\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  // Auto-join as teacher when socket connects\n  useEffect(() => {\n    if (socket && socket.connected && userRole === 'teacher') {\n      socket.emit('join-teacher');\n    }\n  }, [socket, socket === null || socket === void 0 ? void 0 : socket.connected, userRole]);\n  const joinAsStudent = name => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Joining as student:', name);\n      socket.emit('join-student', {\n        name\n      });\n      setUserRole('student');\n      setUserName(name);\n    } else {\n      console.error('SocketContext: Cannot join as student - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const joinAsTeacher = () => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Joining as teacher');\n      socket.emit('join-teacher');\n      setUserRole('teacher');\n      setUserName('Teacher');\n    } else {\n      console.error('SocketContext: Cannot join as teacher - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const createPoll = pollData => {\n    if (socket && socket.connected) {\n      socket.emit('new-question', pollData);\n    } else {\n      console.error('SocketContext: Cannot create poll - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const submitAnswer = (questionId, selectedOption) => {\n    if (socket && socket.connected) {\n      socket.emit('student-answer', {\n        questionId,\n        selectedOption\n      });\n    } else {\n      console.error('SocketContext: Cannot submit answer - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const kickStudent = studentId => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Kicking student:', studentId);\n      socket.emit('kick-student', studentId);\n    } else {\n      console.error('SocketContext: Cannot kick student - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const endPoll = () => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Ending poll');\n      socket.emit('end-poll');\n    } else {\n      console.error('SocketContext: Cannot end poll - socket not connected');\n      setConnectionError('Cannot connect to server. Please refresh the page.');\n    }\n  };\n  const requestChatHistory = () => {\n    if (socket && socket.connected) {\n      socket.emit('request-chat-history');\n    }\n  };\n  const requestPollResults = () => {\n    if (socket && socket.connected) {\n      console.log('SocketContext: Requesting poll results from server');\n      socket.emit('request-poll-results');\n    }\n  };\n  const clearUnreadMessages = () => {\n    setUnreadMessages(0);\n  };\n  const clearPollResults = () => {\n    setPollResults(null);\n  };\n  const value = {\n    socket,\n    isConnected,\n    userRole,\n    userName,\n    connectionError,\n    chatMessages,\n    unreadMessages,\n    pollResults,\n    joinAsStudent,\n    joinAsTeacher,\n    createPoll,\n    submitAnswer,\n    kickStudent,\n    endPoll,\n    requestChatHistory,\n    requestPollResults,\n    clearUnreadMessages,\n    clearPollResults,\n    setPollResults\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s2(SocketProvider, \"rtUalDg5PgSH89otcNrjnRQXkpc=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","SocketContext","useSocket","_s","context","Error","SocketProvider","children","_s2","socket","setSocket","isConnected","setIsConnected","userRole","setUserRole","userName","setUserName","connectionError","setConnectionError","chatMessages","setChatMessages","unreadMessages","setUnreadMessages","pollResults","setPollResults","console","log","serverUrl","process","env","REACT_APP_SERVER_URL","newSocket","transports","timeout","forceNew","on","emit","name","error","message","reason","setTimeout","connect","history","prev","newMessages","data","question","role","close","connected","joinAsStudent","joinAsTeacher","createPoll","pollData","submitAnswer","questionId","selectedOption","kickStudent","studentId","endPoll","requestChatHistory","requestPollResults","clearUnreadMessages","clearPollResults","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/home/Desktop/SDE-Assignment/client/src/contexts/SocketContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst SocketContext = createContext();\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [userRole, setUserRole] = useState(null);\r\n  const [userName, setUserName] = useState(null);\r\n  const [connectionError, setConnectionError] = useState(null);\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [unreadMessages, setUnreadMessages] = useState(0);\r\n  const [pollResults, setPollResults] = useState(null);\r\n\r\n  // Debug log when pollResults changes\r\n  useEffect(() => {\r\n    console.log('SocketContext: pollResults state changed:', pollResults);\r\n  }, [pollResults]);\r\n\r\n  useEffect(() => {\r\n    // Connect to the backend server\r\n    const serverUrl = process.env.REACT_APP_SERVER_URL || 'http://localhost:5000';\r\n    \r\n    const newSocket = io(serverUrl, {\r\n      transports: ['websocket', 'polling'],\r\n      timeout: 20000,\r\n      forceNew: true\r\n    });\r\n    \r\n    newSocket.on('connect', () => {\r\n      console.log('SocketContext: Connected to server');\r\n      setIsConnected(true);\r\n      setConnectionError(null);\r\n      \r\n      // Re-join if we have user info\r\n      if (userRole && userName) {\r\n        console.log('SocketContext: Re-joining as', userRole, userName);\r\n        if (userRole === 'student') {\r\n          newSocket.emit('join-student', { name: userName });\r\n        } else if (userRole === 'teacher') {\r\n          newSocket.emit('join-teacher');\r\n        }\r\n      }\r\n    });\r\n\r\n    newSocket.on('connect_error', (error) => {\r\n      setConnectionError(`Failed to connect to server: ${error.message}`);\r\n      setIsConnected(false);\r\n    });\r\n\r\n    newSocket.on('disconnect', (reason) => {\r\n      console.log('SocketContext: Disconnected:', reason);\r\n      setIsConnected(false);\r\n      if (reason === 'io server disconnect') {\r\n        // the disconnection was initiated by the server, you need to reconnect manually\r\n        console.log('SocketContext: Server disconnected, attempting to reconnect...');\r\n        setTimeout(() => {\r\n          newSocket.connect();\r\n        }, 1000);\r\n      } else if (reason === 'io client disconnect') {\r\n        // the disconnection was initiated by the client\r\n        console.log('SocketContext: Client disconnected');\r\n      } else {\r\n        // the disconnection was initiated by the network\r\n        console.log('SocketContext: Network disconnected, attempting to reconnect...');\r\n        setTimeout(() => {\r\n          newSocket.connect();\r\n        }, 2000);\r\n      }\r\n    });\r\n\r\n    newSocket.on('error', (error) => {\r\n      setConnectionError(`Socket error: ${error.message}`);\r\n    });\r\n\r\n    // Global chat event listeners\r\n    newSocket.on('chat-history', (history) => {\r\n      setChatMessages(history);\r\n    });\r\n\r\n    newSocket.on('new-message', (message) => {\r\n      setChatMessages(prev => {\r\n        const newMessages = [...prev, message];\r\n        return newMessages;\r\n      });\r\n      setUnreadMessages(prev => prev + 1);\r\n    });\r\n\r\n    // Global poll results listener\r\n    newSocket.on('poll-results', (data) => {\r\n      console.log('SocketContext: Received poll results:', data);\r\n      console.log('SocketContext: Setting pollResults state');\r\n      setPollResults(data);\r\n      console.log('SocketContext: pollResults state updated');\r\n    });\r\n\r\n    // Clear poll results when new question is created\r\n    newSocket.on('new-question', (question) => {\r\n      setPollResults(null);\r\n    });\r\n\r\n    // Listen for successful join\r\n    newSocket.on('joined', (data) => {\r\n      setUserRole(data.role);\r\n      setUserName(data.name);\r\n    });\r\n\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, []);\r\n\r\n  // Auto-join as teacher when socket connects\r\n  useEffect(() => {\r\n    if (socket && socket.connected && userRole === 'teacher') {\r\n      socket.emit('join-teacher');\r\n    }\r\n  }, [socket, socket?.connected, userRole]);\r\n\r\n  const joinAsStudent = (name) => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Joining as student:', name);\r\n      socket.emit('join-student', { name });\r\n      setUserRole('student');\r\n      setUserName(name);\r\n    } else {\r\n      console.error('SocketContext: Cannot join as student - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const joinAsTeacher = () => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Joining as teacher');\r\n      socket.emit('join-teacher');\r\n      setUserRole('teacher');\r\n      setUserName('Teacher');\r\n    } else {\r\n      console.error('SocketContext: Cannot join as teacher - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const createPoll = (pollData) => {\r\n    if (socket && socket.connected) {\r\n      socket.emit('new-question', pollData);\r\n    } else {\r\n      console.error('SocketContext: Cannot create poll - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const submitAnswer = (questionId, selectedOption) => {\r\n    if (socket && socket.connected) {\r\n      socket.emit('student-answer', { questionId, selectedOption });\r\n    } else {\r\n      console.error('SocketContext: Cannot submit answer - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const kickStudent = (studentId) => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Kicking student:', studentId);\r\n      socket.emit('kick-student', studentId);\r\n    } else {\r\n      console.error('SocketContext: Cannot kick student - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const endPoll = () => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Ending poll');\r\n      socket.emit('end-poll');\r\n    } else {\r\n      console.error('SocketContext: Cannot end poll - socket not connected');\r\n      setConnectionError('Cannot connect to server. Please refresh the page.');\r\n    }\r\n  };\r\n\r\n  const requestChatHistory = () => {\r\n    if (socket && socket.connected) {\r\n      socket.emit('request-chat-history');\r\n    }\r\n  };\r\n\r\n  const requestPollResults = () => {\r\n    if (socket && socket.connected) {\r\n      console.log('SocketContext: Requesting poll results from server');\r\n      socket.emit('request-poll-results');\r\n    }\r\n  };\r\n\r\n  const clearUnreadMessages = () => {\r\n    setUnreadMessages(0);\r\n  };\r\n\r\n  const clearPollResults = () => {\r\n    setPollResults(null);\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    userRole,\r\n    userName,\r\n    connectionError,\r\n    chatMessages,\r\n    unreadMessages,\r\n    pollResults,\r\n    joinAsStudent,\r\n    joinAsTeacher,\r\n    createPoll,\r\n    submitAnswer,\r\n    kickStudent,\r\n    endPoll,\r\n    requestChatHistory,\r\n    requestPollResults,\r\n    clearUnreadMessages,\r\n    clearPollResults,\r\n    setPollResults,\r\n  };\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,aAAa,gBAAGP,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMQ,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,OAAO,GAAGT,UAAU,CAACM,aAAa,CAAC;EACzC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,SAAS;AAQtB,OAAO,MAAMI,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC9C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACoB,eAAe,EAAEC,kBAAkB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACwB,cAAc,EAAEC,iBAAiB,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC0B,WAAW,EAAEC,cAAc,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACAD,SAAS,CAAC,MAAM;IACd6B,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEH,WAAW,CAAC;EACvE,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB3B,SAAS,CAAC,MAAM;IACd;IACA,MAAM+B,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,uBAAuB;IAE7E,MAAMC,SAAS,GAAGjC,EAAE,CAAC6B,SAAS,EAAE;MAC9BK,UAAU,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;MACpCC,OAAO,EAAE,KAAK;MACdC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEFH,SAAS,CAACI,EAAE,CAAC,SAAS,EAAE,MAAM;MAC5BV,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjDd,cAAc,CAAC,IAAI,CAAC;MACpBM,kBAAkB,CAAC,IAAI,CAAC;;MAExB;MACA,IAAIL,QAAQ,IAAIE,QAAQ,EAAE;QACxBU,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEb,QAAQ,EAAEE,QAAQ,CAAC;QAC/D,IAAIF,QAAQ,KAAK,SAAS,EAAE;UAC1BkB,SAAS,CAACK,IAAI,CAAC,cAAc,EAAE;YAAEC,IAAI,EAAEtB;UAAS,CAAC,CAAC;QACpD,CAAC,MAAM,IAAIF,QAAQ,KAAK,SAAS,EAAE;UACjCkB,SAAS,CAACK,IAAI,CAAC,cAAc,CAAC;QAChC;MACF;IACF,CAAC,CAAC;IAEFL,SAAS,CAACI,EAAE,CAAC,eAAe,EAAGG,KAAK,IAAK;MACvCpB,kBAAkB,CAAC,gCAAgCoB,KAAK,CAACC,OAAO,EAAE,CAAC;MACnE3B,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;IAEFmB,SAAS,CAACI,EAAE,CAAC,YAAY,EAAGK,MAAM,IAAK;MACrCf,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEc,MAAM,CAAC;MACnD5B,cAAc,CAAC,KAAK,CAAC;MACrB,IAAI4B,MAAM,KAAK,sBAAsB,EAAE;QACrC;QACAf,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;QAC7Ee,UAAU,CAAC,MAAM;UACfV,SAAS,CAACW,OAAO,CAAC,CAAC;QACrB,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,MAAM,IAAIF,MAAM,KAAK,sBAAsB,EAAE;QAC5C;QACAf,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACnD,CAAC,MAAM;QACL;QACAD,OAAO,CAACC,GAAG,CAAC,iEAAiE,CAAC;QAC9Ee,UAAU,CAAC,MAAM;UACfV,SAAS,CAACW,OAAO,CAAC,CAAC;QACrB,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC,CAAC;IAEFX,SAAS,CAACI,EAAE,CAAC,OAAO,EAAGG,KAAK,IAAK;MAC/BpB,kBAAkB,CAAC,iBAAiBoB,KAAK,CAACC,OAAO,EAAE,CAAC;IACtD,CAAC,CAAC;;IAEF;IACAR,SAAS,CAACI,EAAE,CAAC,cAAc,EAAGQ,OAAO,IAAK;MACxCvB,eAAe,CAACuB,OAAO,CAAC;IAC1B,CAAC,CAAC;IAEFZ,SAAS,CAACI,EAAE,CAAC,aAAa,EAAGI,OAAO,IAAK;MACvCnB,eAAe,CAACwB,IAAI,IAAI;QACtB,MAAMC,WAAW,GAAG,CAAC,GAAGD,IAAI,EAAEL,OAAO,CAAC;QACtC,OAAOM,WAAW;MACpB,CAAC,CAAC;MACFvB,iBAAiB,CAACsB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IACrC,CAAC,CAAC;;IAEF;IACAb,SAAS,CAACI,EAAE,CAAC,cAAc,EAAGW,IAAI,IAAK;MACrCrB,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEoB,IAAI,CAAC;MAC1DrB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvDF,cAAc,CAACsB,IAAI,CAAC;MACpBrB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACzD,CAAC,CAAC;;IAEF;IACAK,SAAS,CAACI,EAAE,CAAC,cAAc,EAAGY,QAAQ,IAAK;MACzCvB,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC;;IAEF;IACAO,SAAS,CAACI,EAAE,CAAC,QAAQ,EAAGW,IAAI,IAAK;MAC/BhC,WAAW,CAACgC,IAAI,CAACE,IAAI,CAAC;MACtBhC,WAAW,CAAC8B,IAAI,CAACT,IAAI,CAAC;IACxB,CAAC,CAAC;IAEF3B,SAAS,CAACqB,SAAS,CAAC;IAEpB,OAAO,MAAM;MACXA,SAAS,CAACkB,KAAK,CAAC,CAAC;IACnB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACArD,SAAS,CAAC,MAAM;IACd,IAAIa,MAAM,IAAIA,MAAM,CAACyC,SAAS,IAAIrC,QAAQ,KAAK,SAAS,EAAE;MACxDJ,MAAM,CAAC2B,IAAI,CAAC,cAAc,CAAC;IAC7B;EACF,CAAC,EAAE,CAAC3B,MAAM,EAAEA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEyC,SAAS,EAAErC,QAAQ,CAAC,CAAC;EAEzC,MAAMsC,aAAa,GAAId,IAAI,IAAK;IAC9B,IAAI5B,MAAM,IAAIA,MAAM,CAACyC,SAAS,EAAE;MAC9BzB,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEW,IAAI,CAAC;MACvD5B,MAAM,CAAC2B,IAAI,CAAC,cAAc,EAAE;QAAEC;MAAK,CAAC,CAAC;MACrCvB,WAAW,CAAC,SAAS,CAAC;MACtBE,WAAW,CAACqB,IAAI,CAAC;IACnB,CAAC,MAAM;MACLZ,OAAO,CAACa,KAAK,CAAC,8DAA8D,CAAC;MAC7EpB,kBAAkB,CAAC,oDAAoD,CAAC;IAC1E;EACF,CAAC;EAED,MAAMkC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI3C,MAAM,IAAIA,MAAM,CAACyC,SAAS,EAAE;MAC9BzB,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChDjB,MAAM,CAAC2B,IAAI,CAAC,cAAc,CAAC;MAC3BtB,WAAW,CAAC,SAAS,CAAC;MACtBE,WAAW,CAAC,SAAS,CAAC;IACxB,CAAC,MAAM;MACLS,OAAO,CAACa,KAAK,CAAC,8DAA8D,CAAC;MAC7EpB,kBAAkB,CAAC,oDAAoD,CAAC;IAC1E;EACF,CAAC;EAED,MAAMmC,UAAU,GAAIC,QAAQ,IAAK;IAC/B,IAAI7C,MAAM,IAAIA,MAAM,CAACyC,SAAS,EAAE;MAC9BzC,MAAM,CAAC2B,IAAI,CAAC,cAAc,EAAEkB,QAAQ,CAAC;IACvC,CAAC,MAAM;MACL7B,OAAO,CAACa,KAAK,CAAC,0DAA0D,CAAC;MACzEpB,kBAAkB,CAAC,oDAAoD,CAAC;IAC1E;EACF,CAAC;EAED,MAAMqC,YAAY,GAAGA,CAACC,UAAU,EAAEC,cAAc,KAAK;IACnD,IAAIhD,MAAM,IAAIA,MAAM,CAACyC,SAAS,EAAE;MAC9BzC,MAAM,CAAC2B,IAAI,CAAC,gBAAgB,EAAE;QAAEoB,UAAU;QAAEC;MAAe,CAAC,CAAC;IAC/D,CAAC,MAAM;MACLhC,OAAO,CAACa,KAAK,CAAC,4DAA4D,CAAC;MAC3EpB,kBAAkB,CAAC,oDAAoD,CAAC;IAC1E;EACF,CAAC;EAED,MAAMwC,WAAW,GAAIC,SAAS,IAAK;IACjC,IAAIlD,MAAM,IAAIA,MAAM,CAACyC,SAAS,EAAE;MAC9BzB,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEiC,SAAS,CAAC;MACzDlD,MAAM,CAAC2B,IAAI,CAAC,cAAc,EAAEuB,SAAS,CAAC;IACxC,CAAC,MAAM;MACLlC,OAAO,CAACa,KAAK,CAAC,2DAA2D,CAAC;MAC1EpB,kBAAkB,CAAC,oDAAoD,CAAC;IAC1E;EACF,CAAC;EAED,MAAM0C,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAInD,MAAM,IAAIA,MAAM,CAACyC,SAAS,EAAE;MAC9BzB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzCjB,MAAM,CAAC2B,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC,MAAM;MACLX,OAAO,CAACa,KAAK,CAAC,uDAAuD,CAAC;MACtEpB,kBAAkB,CAAC,oDAAoD,CAAC;IAC1E;EACF,CAAC;EAED,MAAM2C,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAIpD,MAAM,IAAIA,MAAM,CAACyC,SAAS,EAAE;MAC9BzC,MAAM,CAAC2B,IAAI,CAAC,sBAAsB,CAAC;IACrC;EACF,CAAC;EAED,MAAM0B,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAIrD,MAAM,IAAIA,MAAM,CAACyC,SAAS,EAAE;MAC9BzB,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;MACjEjB,MAAM,CAAC2B,IAAI,CAAC,sBAAsB,CAAC;IACrC;EACF,CAAC;EAED,MAAM2B,mBAAmB,GAAGA,CAAA,KAAM;IAChCzC,iBAAiB,CAAC,CAAC,CAAC;EACtB,CAAC;EAED,MAAM0C,gBAAgB,GAAGA,CAAA,KAAM;IAC7BxC,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMyC,KAAK,GAAG;IACZxD,MAAM;IACNE,WAAW;IACXE,QAAQ;IACRE,QAAQ;IACRE,eAAe;IACfE,YAAY;IACZE,cAAc;IACdE,WAAW;IACX4B,aAAa;IACbC,aAAa;IACbC,UAAU;IACVE,YAAY;IACZG,WAAW;IACXE,OAAO;IACPC,kBAAkB;IAClBC,kBAAkB;IAClBC,mBAAmB;IACnBC,gBAAgB;IAChBxC;EACF,CAAC;EAED,oBACExB,OAAA,CAACC,aAAa,CAACiE,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA1D,QAAA,EAClCA;EAAQ;IAAA4D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAC9D,GAAA,CAnOWF,cAAc;AAAAiE,EAAA,GAAdjE,cAAc;AAAA,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}